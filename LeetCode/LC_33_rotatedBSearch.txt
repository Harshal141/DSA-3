class Solution {
    // An iterative binary search function.
    int rotatedBSearch(vector<int>& arr, int l, int r, int x)
    {
        while (l <= r) {
            int m = l + (r - l) / 2;
    
            // Check if x is present at mid
            if (arr[m] == x)
                return m;
    
            // If x greater
            if (arr[m] < x)
                if(arr[m] >= arr[0])
                    l = m+1;
                else {
                    if(x < arr[0])
                        l = m+1;
                    else
                        r = m-1;
                }
     
            // If x is smaller, ignore right half
            else
                if(arr[m] >= arr[0])
                    if(x >= arr[0])
                        r = m-1;
                    else
                        l = m+1;
                else {
                    r = m-1;
                }
                
        }
    
        // If we reach here, then element was not present
        return -1;
    }
public:
    int search(vector<int>& nums, int target) {
        return rotatedBSearch(nums,0,nums.size()-1,target);
    }
};