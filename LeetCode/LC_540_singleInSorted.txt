class Solution {
int binarySearch(vector<int> &nums, int l, int r)
{
    while (l <= r) {
        int m = l + (r - l) / 2;
 
        // Check if x is present at mid
        if (nums[m] != nums[m+1] && nums[m-1] != nums[m])
            return m;
 
        // If x greater, ignore left half
        else if (m%2==0){
            if(nums[m] == nums[m+1] )l = m + 1;
            else r = m-1;
        }
        else
            if(nums[m] == nums[m+1] )r = m-1;
            else l = m + 1;
    }

    return -1;
}
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n =nums.size();
        if(n == 1) return nums[0];
        if(nums[0] != nums[1])return nums[0];
        else if(nums[n-1] != nums[n-2])return nums[n-1];
        else{
            return nums[binarySearch(nums,1,n-2)];
        }
    }
};